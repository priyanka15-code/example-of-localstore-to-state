{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngrx/store\";\nexport class LoginService {\n  /*  private localStorageKey = 'authToken'; */\n  constructor(http, store) {\n    this.http = http;\n    this.store = store;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password\n    }).pipe(tap(response => {\n      /* localStorage.setItem(this.localStorageKey, response.token); */\n      this.store.dispatch(login({\n        token: response.token\n      }));\n    }));\n  }\n  register(username, password, email) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      username,\n      password,\n      email\n    });\n  }\n  logout() {\n    /*  localStorage.removeItem(this.localStorageKey); */\n    this.store.dispatch(logout());\n  }\n  getToken() {\n    /*  return localStorage.getItem(this.localStorageKey); */\n    return this.store.select(state => state.auth.token);\n  }\n  isAuthenticated() {\n    /* const token = this.getToken();\n    return !!token; */\n    return this.store.select(state => !!state.auth.token);\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","LoginService","constructor","http","store","apiUrl","login","username","password","post","pipe","response","dispatch","token","register","email","logout","getToken","select","state","auth","isAuthenticated","_","i0","ɵɵinject","i1","HttpClient","i2","Store","_2","factory","ɵfac","providedIn"],"sources":["/home/devmonk--/thime/example/Frontend/src/app/login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { AppState} from './state/app.state';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private apiUrl = 'http://localhost:3000/api/auth';\n /*  private localStorageKey = 'authToken'; */\n\n  constructor(private http: HttpClient, private store: Store<AppState>) {}\n\n  login(username: string, password: string): Observable<{ token: string }> {\n    return this.http.post<{ token: string }>(`${this.apiUrl}/login`, { username, password }).pipe(\n      tap(response => {\n        /* localStorage.setItem(this.localStorageKey, response.token); */\n        this.store.dispatch(login({token: response.token}));\n      })\n    );\n  }\n\n\n  register(username: string, password: string, email: string): Observable<{ message: string }> {\n    return this.http.post<{ message: string }>(`${this.apiUrl}/register`, { username, password, email });\n  }\n\n\n  logout(): void {\n   /*  localStorage.removeItem(this.localStorageKey); */\n   this.store.dispatch(logout());\n  }\n\n  getToken(): Observable<string | null> {\n   /*  return localStorage.getItem(this.localStorageKey); */\n   return this.store.select(state => state.auth.token);\n  }\n\n  isAuthenticated(): Observable<boolean> {\n    /* const token = this.getToken();\n    return !!token; */\n    return this.store.select(state => !!state.auth.token)\n  }\n}\n"],"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;;AASpC,OAAM,MAAOC,YAAY;EAGxB;EAECC,YAAoBC,IAAgB,EAAUC,KAAsB;IAAhD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,KAAK,GAALA,KAAK;IAH3C,KAAAC,MAAM,GAAG,gCAAgC;EAGsB;EAEvEC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAoB,GAAG,IAAI,CAACJ,MAAM,QAAQ,EAAE;MAAEE,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CAC3FV,GAAG,CAACW,QAAQ,IAAG;MACb;MACA,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACN,KAAK,CAAC;QAACO,KAAK,EAAEF,QAAQ,CAACE;MAAK,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CACH;EACH;EAGAC,QAAQA,CAACP,QAAgB,EAAEC,QAAgB,EAAEO,KAAa;IACxD,OAAO,IAAI,CAACZ,IAAI,CAACM,IAAI,CAAsB,GAAG,IAAI,CAACJ,MAAM,WAAW,EAAE;MAAEE,QAAQ;MAAEC,QAAQ;MAAEO;IAAK,CAAE,CAAC;EACtG;EAGAC,MAAMA,CAAA;IACL;IACA,IAAI,CAACZ,KAAK,CAACQ,QAAQ,CAACI,MAAM,EAAE,CAAC;EAC9B;EAEAC,QAAQA,CAAA;IACP;IACA,OAAO,IAAI,CAACb,KAAK,CAACc,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACP,KAAK,CAAC;EACpD;EAEAQ,eAAeA,CAAA;IACb;;IAEA,OAAO,IAAI,CAACjB,KAAK,CAACc,MAAM,CAACC,KAAK,IAAI,CAAC,CAACA,KAAK,CAACC,IAAI,CAACP,KAAK,CAAC;EACvD;EAAC,QAAAS,CAAA,G;qBApCUrB,YAAY,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,KAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAZ5B,YAAY;IAAA6B,OAAA,EAAZ7B,YAAY,CAAA8B,IAAA;IAAAC,UAAA,EAFX;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}